Projektübersicht – ReLife (SwiftUI iOS Demo)

Kurzbeschreibung
- Demo‑App „ReLife“ auf Basis von SwiftUI. Lädt beim „Verbinden“ plausible, zufällig generierte Gesundheitsdaten (letzte 10 Tage) rein lokal (keine echten Verbindungen).
- Fokus: Visualisierung (Karten, Linien‑Charts), Notizen/Tags, CSV‑Export, Grundeinstellungen (Darstellung, Einheiten, Datensteuerung).

Wichtigste Technologien
- Swift / SwiftUI: gesamtes UI, Navigation über `NavigationStack`, Tabs via `TabView`.
- ObservableObject/State: `AppState` als zentrale, gemeinsam genutzte Zustandsquelle (`@EnvironmentObject`).
- Apple Charts (`import Charts`): Liniendiagramme für Puls, SpO2, Hauttemperatur, EDA.
- UIKit‑Interop: 
  - Haptik (leichte Taps) in `PrimaryButton` per `UIImpactFeedbackGenerator` (nur iOS).
  - Teilen‑Sheet (`ActivityView`) über `UIActivityViewController` für CSV‑Export.
- Assets: Farbsets (`BrandPrimary`, `BrandSecondary`, `CardBG`) und App‑Icon in `Assets.xcassets`.
- Tests:
  - UI‑Tests mit XCTest (Start/Launch Performance Gerüst).
  - Unit‑Tests Gerüst mit `import Testing` (neues Swift‑Testing‑Modul in aktuellen Toolchains/Xcode‑Versionen).

Projektstruktur (Auszug)
- ReLife/ReLifeApp.swift: App‑Entry, hängt `AppState` als Environment an und setzt Farbschema.
- ReLife/AppState.swift: Zentrales Modell & State.
  - Modelle: `Sample` (timestamp, hr, spo2, skinTempC, edaMicroSiemens), `Note` (date, tag, text).
  - Enums: `NoteTag`, `MetricType` (all, hr, spo2, skinTemp, eda), `TimeWindow` (6h/12h/24h), `TemperatureUnit` (°C/°F), `ColorSchemeOption` (System/Hell/Dunkel).
  - Aktionen: `connectAndLoadDemo()`, `generateLast10Days()`, `reloadDemoData()`, `clearAllData()`, `addNote(...)`, `addStressMarker()`.
  - Array‑Helper: Filter nach Zeitraum bzw. „heute“.
  - Farb‑Helper: `Color.rlPrimary/rlSecondary/rlCardBG` mappen auf Asset‑Farben.
- ReLife/ContentView.swift: Schaltet zwischen `ConnectScreen` und Tab‑UI (Heute, Trends, Protokoll, Einstellungen).

Views – Hauptscreens (ReLife/Views/Tabs)
- TodayView.swift:
  - Überblick „Heute“: vier Kennzahlen‑Karten (Puls, SpO2, Hauttemp., Hautleitwert) mit Mini‑Sparklines.
  - Zeitfenster‑Picker (6/12/24h) für darunterliegende Charts.
  - 4 Charts (je Metrik) auf Basis von `MetricChartView`.
  - Schnellaktionen: Stress‑Marker setzen, Notiz hinzufügen (Sheet).
- TrendsView.swift:
  - Metrik‑Picker (Alle/Einzelmetriken), einfache Statistik (Min/Ø/Max) und 24h‑Charts.
  - CSV‑Export aller Samples via Teilen‑Sheet (`ActivityView`).
- LogView.swift:
  - Notizliste mit Tag‑Filter (Segmented Picker), Hinzufügen/Löschen von Notizen.
- SettingsView.swift:
  - Darstellung: Farbmodus (System/Hell/Dunkel).
  - Einheiten: Temperatur (°C/°F).
  - Daten: Demo‑Daten neu laden, alle Daten löschen (Bestätigungsdialog).
  - Info/Status: Version, „Offline‑Demo“, Verbindungsstatus.

Views – Komponenten (ReLife/Views/Components)
- PrimaryButton / SecondaryButton: einheitliche Buttons; Primary mit Haptik (iOS).
- MetricCardView: kompakte Kennzahlenkarte inkl. Mini‑Chart (Charts) und Icon.
- MetricChartView: Haupt‑Charts pro Metrik mit Zeitachse (Apple Charts).
- StatCard: kleine Statistikkarte (Min/Ø/Max).
- TagPill: Tag‑Abzeichen für Notizen.
- AddNoteSheet: Reusable Sheet zum Erfassen einer Notiz inkl. Tag‑Picker.
- ActivityView: `UIViewControllerRepresentable`‑Wrapper für Teilen‑Sheet (CSV‑Export).

Daten & Logik
- Es gibt keine echte Datenquelle oder Persistenz. `AppState.generateLast10Days()` erzeugt plausible Mock‑Daten im 10‑Minuten‑Raster über 10 Tage.
- Filtern/Segmentieren:
  - `TimeWindow` bestimmt die in Charts angezeigten Stunden.
  - Helper auf `[Sample]` filtern auf „heute“ bzw. „letzte X Stunden“.
- Einheiten/Formatierung:
  - Temperatur wird nach Einstellung in °C oder °F angezeigt (Umrechnung im View).
  - CSV‑Export enthält ISO‑8601‑Timestamps und Werte mit einfacher Formatierung.

Design & UX
- Farben über Asset‑Katalog und `Color`‑Extension.
- System‑Icons (SF Symbols) für Konsistenz.
- Schatten/Ecken für Kartenoptik, einfache Accessibility‑Labels.
- Haptik‑Feedback für wichtige Aktionen (iOS).

Build/Runtime‑Anforderungen
- Xcode‑Projekt: `ReLife.xcodeproj` (iOS App, SwiftUI).
- iOS 16+ empfohlen (Nutzung von `Charts`, `NavigationStack`).
- Keine externen SwiftPM‑Dependencies im Projektordner erkennbar; `Charts` ist das Apple‑Framework.
- Tests: UI‑Tests via XCTest; Unit‑Tests nutzen `import Testing` (erfordert aktuelle Xcode/Swift‑Toolchain mit Swift‑Testing; alternativ kann man diese Tests vorerst ignorieren/deaktivieren, wenn Toolchain es nicht bereitstellt).

Bekannte Einschränkungen
- Reine Offline‑Demo: keine echte Geräte‑/Cloud‑Verbindung, keine Persistenz; Daten gehen bei App‑Neustart verloren.
- App‑Icon‑Set enthält ein JPEG; für Release‑Builds sollte ein vollständiger Icon‑Satz mit korrekten Größen generiert werden.
- In manchen Editoren/Konsolen können Umlaute/Sonderzeichen als � erscheinen – Dateien sollten UTF‑8 sein.

Tipps zum Einstieg
1) Starte in `ReLifeApp.swift` und `ContentView.swift`, um Navigationsfluss zu verstehen.
2) Lies `AppState.swift` für Datenmodell, Demo‑Datenerzeugung und globale Einstellungen.
3) Öffne nacheinander die Tabs (`TodayView`, `TrendsView`, `LogView`, `SettingsView`).
4) Sieh dir Komponenten unter `Views/Components` an (Chart‑ und Kartenaufbau).
5) Baue/Runs in Xcode (iOS‑Simulator, iOS 16+). Für CSV‑Export eine Beispiel‑Session durchlaufen und Teilen‑Sheet testen.

Fragen/Erweiterungen (Ideen)
- Persistenz ergänzen (z. B. Core Data/SQLite/Files) und echte Datenquellen anbinden.
- Mehr Statistiken (z. B. Tages‑/Wochen‑Aggregationen) und Vergleich mit Baselines.
- Lokalisierung strukturieren (Localizable.strings) und Englisch hinzufügen.
- Tests ausbauen (UI‑Flows, Generierung plausibler Daten, CSV‑Validierung).

